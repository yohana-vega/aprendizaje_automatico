{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a13db703-a57c-41c2-b31b-0cee93efef87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>edad</th>\n",
       "      <th>horas_ejercicio</th>\n",
       "      <th>peso</th>\n",
       "      <th>estres</th>\n",
       "      <th>ingresos</th>\n",
       "      <th>horas_tv</th>\n",
       "      <th>presion_arterial</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>58</td>\n",
       "      <td>7</td>\n",
       "      <td>81</td>\n",
       "      <td>1</td>\n",
       "      <td>21150</td>\n",
       "      <td>12</td>\n",
       "      <td>73.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>48</td>\n",
       "      <td>2</td>\n",
       "      <td>55</td>\n",
       "      <td>1</td>\n",
       "      <td>94740</td>\n",
       "      <td>22</td>\n",
       "      <td>82.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>81</td>\n",
       "      <td>3</td>\n",
       "      <td>86617</td>\n",
       "      <td>24</td>\n",
       "      <td>90.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>53</td>\n",
       "      <td>6</td>\n",
       "      <td>36896</td>\n",
       "      <td>34</td>\n",
       "      <td>93.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>27</td>\n",
       "      <td>4</td>\n",
       "      <td>60</td>\n",
       "      <td>7</td>\n",
       "      <td>66175</td>\n",
       "      <td>29</td>\n",
       "      <td>65.74</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   edad  horas_ejercicio  peso  estres  ingresos  horas_tv  presion_arterial\n",
       "0    58                7    81       1     21150        12             73.83\n",
       "1    48                2    55       1     94740        22             82.26\n",
       "2    34                2    81       3     86617        24             90.47\n",
       "3    62                0    53       6     36896        34             93.49\n",
       "4    27                4    60       7     66175        29             65.74"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cargar dataset\n",
    "df = pd.read_csv(\"dataset_regresion_multiple.csv\", sep=\";\")\n",
    "\n",
    "# Mostrar las primeras filas\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "60a1fdc0-7d93-4012-a29e-2793ec95c9b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "hipertension\n",
       "0    97\n",
       "1     3\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Crear variable binaria con umbral educativo 130 mmHg\n",
    "df[\"hipertension\"] = (df[\"presion_arterial\"] >= 130).astype(int)\n",
    "\n",
    "# Features y target\n",
    "X = df[[\"edad\", \"horas_ejercicio\", \"peso\", \"estres\", \"ingresos\", \"horas_tv\"]]\n",
    "y = df[\"hipertension\"]\n",
    "\n",
    "# Split 80/20 estratificado\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=42, stratify=y\n",
    ")\n",
    "\n",
    "# Ver distribución de clases\n",
    "y.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9328cfa5-98e4-4356-8dd1-99916debde3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((80, 6), (20, 6), (80,), (20,))"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Definir variables predictoras (features) y objetivo (target)\n",
    "X = df[[\"edad\", \"horas_ejercicio\", \"peso\", \"estres\", \"ingresos\", \"horas_tv\"]]\n",
    "y = df[\"hipertension\"]\n",
    "\n",
    "# Dividir en conjunto de entrenamiento y prueba (80/20)\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=42, stratify=y\n",
    ")\n",
    "\n",
    "# Verificamos tamaños\n",
    "X_train.shape, X_test.shape, y_train.shape, y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4a3120fc-88c0-45ca-aefb-2a15cb6c04c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline (Dummy - clase mayoritaria) | Accuracy: 1.000\n"
     ]
    }
   ],
   "source": [
    "# Baseline: clasificador \"tonto\" que siempre predice la clase mayoritaria\n",
    "from sklearn.dummy import DummyClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "dummy = DummyClassifier(strategy=\"most_frequent\")\n",
    "dummy.fit(X_train, y_train)\n",
    "\n",
    "y_pred_dummy = dummy.predict(X_test)\n",
    "baseline_acc = accuracy_score(y_test, y_pred_dummy)\n",
    "\n",
    "print(f\"Baseline (Dummy - clase mayoritaria) | Accuracy: {baseline_acc:.3f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9f518b55-c1b1-4a3e-8452-e476477b917e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Regresión Logística ===\n",
      "Accuracy : 0.950\n",
      "Precisión: 0.000\n",
      "Recall   : 0.000\n",
      "F1-score : 0.000\n",
      "ROC-AUC  : 1.000\n"
     ]
    }
   ],
   "source": [
    "# Modelo: Regresión Logística con escalado\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score\n",
    "\n",
    "pipe = Pipeline([\n",
    "    (\"scaler\", StandardScaler()),\n",
    "    (\"logreg\", LogisticRegression(max_iter=1000, random_state=42))\n",
    "])\n",
    "\n",
    "# Entrenar\n",
    "pipe.fit(X_train, y_train)\n",
    "\n",
    "# Predicciones\n",
    "y_pred = pipe.predict(X_test)\n",
    "y_prob = pipe.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# Métricas\n",
    "acc  = accuracy_score(y_test, y_pred)\n",
    "prec = precision_score(y_test, y_pred, zero_division=0)\n",
    "rec  = recall_score(y_test, y_pred, zero_division=0)\n",
    "f1   = f1_score(y_test, y_pred, zero_division=0)\n",
    "roc  = roc_auc_score(y_test, y_prob)\n",
    "\n",
    "print(\"=== Regresión Logística ===\")\n",
    "print(f\"Accuracy : {acc:.3f}\")\n",
    "print(f\"Precisión: {prec:.3f}\")\n",
    "print(f\"Recall   : {rec:.3f}\")\n",
    "print(f\"F1-score : {f1:.3f}\")\n",
    "print(f\"ROC-AUC  : {roc:.3f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "93de2fd6-3a94-4a54-a8f3-0e89d83eb907",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=pipe.classes_)\n",
    "disp.plot(cmap=\"Blues\")\n",
    "plt.title(\"Matriz de Confusión - Regresión Logística\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b7649878-a1f2-4b03-8918-2a1818649650",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import RocCurveDisplay\n",
    "\n",
    "RocCurveDisplay.from_estimator(pipe, X_test, y_test)\n",
    "plt.title(\"Curva ROC - Regresión Logística\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "42cb448b-1237-4faa-81a6-00ad3e1cd98d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_d50e3\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_d50e3_level0_col0\" class=\"col_heading level0 col0\" >coeficiente</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_d50e3_level0_row0\" class=\"row_heading level0 row0\" >estres</th>\n",
       "      <td id=\"T_d50e3_row0_col0\" class=\"data row0 col0\" >0.992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d50e3_level0_row1\" class=\"row_heading level0 row1\" >peso</th>\n",
       "      <td id=\"T_d50e3_row1_col0\" class=\"data row1 col0\" >0.987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d50e3_level0_row2\" class=\"row_heading level0 row2\" >edad</th>\n",
       "      <td id=\"T_d50e3_row2_col0\" class=\"data row2 col0\" >0.956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d50e3_level0_row3\" class=\"row_heading level0 row3\" >horas_ejercicio</th>\n",
       "      <td id=\"T_d50e3_row3_col0\" class=\"data row3 col0\" >-0.159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d50e3_level0_row4\" class=\"row_heading level0 row4\" >ingresos</th>\n",
       "      <td id=\"T_d50e3_row4_col0\" class=\"data row4 col0\" >-0.276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d50e3_level0_row5\" class=\"row_heading level0 row5\" >horas_tv</th>\n",
       "      <td id=\"T_d50e3_row5_col0\" class=\"data row5 col0\" >-0.446</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x1f1d2ee81a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Interpretación rápida:\n",
      "- Mayor efecto positivo: estres → valores más altos aumentan la prob. estimada de hipertensión.\n",
      "- Mayor efecto negativo: horas_tv → valores más altos disminuyen la prob. estimada de hipertensión.\n"
     ]
    }
   ],
   "source": [
    "# Importancia de variables (coeficientes de la Regresión Logística)\n",
    "features = [\"edad\", \"horas_ejercicio\", \"peso\", \"estres\", \"ingresos\", \"horas_tv\"]\n",
    "\n",
    "logreg = pipe.named_steps[\"logreg\"]\n",
    "coef = pd.Series(logreg.coef_[0], index=features).sort_values(ascending=False)\n",
    "\n",
    "display(coef.to_frame(\"coeficiente\").style.format(\"{:.3f}\"))\n",
    "\n",
    "# Mini interpretación automática\n",
    "top_pos = coef.index[0]        # mayor efecto positivo\n",
    "top_neg = coef.index[-1]       # mayor efecto negativo\n",
    "print(\"\\nInterpretación rápida:\")\n",
    "print(f\"- Mayor efecto positivo: {top_pos} → valores más altos aumentan la prob. estimada de hipertensión.\")\n",
    "print(f\"- Mayor efecto negativo: {top_neg} → valores más altos disminuyen la prob. estimada de hipertensión.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "357d7070-3777-4fc2-92cc-d50fa5012fd6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
